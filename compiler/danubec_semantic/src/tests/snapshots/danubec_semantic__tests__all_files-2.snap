---
source: compiler/danubec_semantic/src/tests/mod.rs
expression: table
---
Env {
    modules: SlotMap {
        slots: [
            Slot {
                version: 0,
                next_free: 0,
            },
            Slot {
                version: 1,
                value: Module {
                    parent: None,
                    children: {
                        Symbol(
                            0,
                        ): ModuleId(
                            2v1,
                        ),
                        Symbol(
                            1,
                        ): ModuleId(
                            3v1,
                        ),
                        Symbol(
                            2,
                        ): ModuleId(
                            4v1,
                        ),
                    },
                    scope: ScopeId(
                        1v1,
                    ),
                    file: FileId(
                        1v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Module {
                    parent: Some(
                        ModuleId(
                            1v1,
                        ),
                    ),
                    children: {},
                    scope: ScopeId(
                        3v1,
                    ),
                    file: FileId(
                        2v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Module {
                    parent: Some(
                        ModuleId(
                            1v1,
                        ),
                    ),
                    children: {},
                    scope: ScopeId(
                        4v1,
                    ),
                    file: FileId(
                        3v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Module {
                    parent: Some(
                        ModuleId(
                            1v1,
                        ),
                    ),
                    children: {},
                    scope: ScopeId(
                        5v1,
                    ),
                    file: FileId(
                        4v1,
                    ),
                },
            },
        ],
        free_head: 5,
        num_elems: 4,
        _k: PhantomData<fn(danubec_symbol::ModuleId) -> danubec_symbol::ModuleId>,
    },
    scopes: SlotMap {
        slots: [
            Slot {
                version: 0,
                next_free: 0,
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: None,
                    kind: Module,
                    types: {
                        Symbol(
                            0,
                        ): [
                            DefinitionId(
                                1v1,
                            ),
                        ],
                        Symbol(
                            1,
                        ): [
                            DefinitionId(
                                2v1,
                            ),
                        ],
                        Symbol(
                            2,
                        ): [
                            DefinitionId(
                                3v1,
                            ),
                        ],
                    },
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: Some(
                        ScopeId(
                            1v1,
                        ),
                    ),
                    kind: Module,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: Some(
                        ModuleId(
                            1v1,
                        ),
                    ),
                    parent: None,
                    kind: Module,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: Some(
                        ModuleId(
                            1v1,
                        ),
                    ),
                    parent: None,
                    kind: Module,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: Some(
                        ModuleId(
                            1v1,
                        ),
                    ),
                    parent: None,
                    kind: Module,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: Some(
                        ScopeId(
                            3v1,
                        ),
                    ),
                    kind: Module,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: Some(
                        ScopeId(
                            4v1,
                        ),
                    ),
                    kind: Module,
                    types: {
                        Symbol(
                            4,
                        ): [
                            DefinitionId(
                                5v1,
                            ),
                        ],
                        Symbol(
                            6,
                        ): [
                            DefinitionId(
                                6v1,
                            ),
                        ],
                        Symbol(
                            3,
                        ): [
                            DefinitionId(
                                4v1,
                            ),
                        ],
                    },
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: Some(
                        ScopeId(
                            5v1,
                        ),
                    ),
                    kind: Module,
                    types: {
                        Symbol(
                            4,
                        ): [
                            DefinitionId(
                                8v1,
                            ),
                        ],
                        Symbol(
                            3,
                        ): [
                            DefinitionId(
                                7v1,
                            ),
                        ],
                    },
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: Some(
                        ScopeId(
                            8v1,
                        ),
                    ),
                    kind: Block,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
            Slot {
                version: 1,
                value: Scope {
                    module: None,
                    parent: Some(
                        ScopeId(
                            8v1,
                        ),
                    ),
                    kind: Block,
                    types: {},
                    values: {},
                    imports: [],
                    implements: [],
                },
            },
        ],
        free_head: 11,
        num_elems: 10,
        _k: PhantomData<fn(danubec_symbol::ScopeId) -> danubec_symbol::ScopeId>,
    },
    attributes: SlotMap {
        slots: [
            Slot {
                version: 0,
                next_free: 0,
            },
        ],
        free_head: 1,
        num_elems: 0,
        _k: PhantomData<fn(danubec_symbol::AttributeId) -> danubec_symbol::AttributeId>,
    },
    definitions: SlotMap {
        slots: [
            Slot {
                version: 0,
                next_free: 0,
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        1v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Module {
                            name: Identifier {
                                symbol: Symbol(
                                    0,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 4..11,
                                },
                            },
                            kind: External,
                        },
                        span: SyntaxNodePtr {
                            kind: DEFINITION_NODE,
                            range: 0..13,
                        },
                    },
                    file: FileId(
                        1v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        1v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Module {
                            name: Identifier {
                                symbol: Symbol(
                                    1,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 17..24,
                                },
                            },
                            kind: External,
                        },
                        span: SyntaxNodePtr {
                            kind: DEFINITION_NODE,
                            range: 13..26,
                        },
                    },
                    file: FileId(
                        1v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        1v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Module {
                            name: Identifier {
                                symbol: Symbol(
                                    2,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 30..35,
                                },
                            },
                            kind: External,
                        },
                        span: SyntaxNodePtr {
                            kind: DEFINITION_NODE,
                            range: 26..38,
                        },
                    },
                    file: FileId(
                        1v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        7v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Struct {
                            name: Identifier {
                                symbol: Symbol(
                                    3,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 7..10,
                                },
                            },
                            type_parameters: [],
                            type_bounds: [],
                            body: Unit,
                        },
                        span: SyntaxNodePtr {
                            kind: STRUCT_DEFINITION_NODE,
                            range: 0..13,
                        },
                    },
                    file: FileId(
                        3v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        7v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Struct {
                            name: Identifier {
                                symbol: Symbol(
                                    4,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 20..23,
                                },
                            },
                            type_parameters: [],
                            type_bounds: [],
                            body: Unnamed(
                                [
                                    (
                                        Private,
                                        TypeExpression {
                                            mutable: false,
                                            kind: Path {
                                                path: Path {
                                                    segments: [
                                                        PathSegment {
                                                            kind: Identifier(
                                                                Identifier {
                                                                    symbol: Symbol(
                                                                        5,
                                                                    ),
                                                                    span: SyntaxNodePtr {
                                                                        kind: IDENTIFIER_NODE,
                                                                        range: 24..29,
                                                                    },
                                                                },
                                                            ),
                                                            binding: Unresolved,
                                                        },
                                                    ],
                                                    binding: Unresolved,
                                                },
                                            },
                                            span: SyntaxNodePtr {
                                                kind: PATH_TYPE_NODE,
                                                range: 24..29,
                                            },
                                        },
                                    ),
                                ],
                            ),
                        },
                        span: SyntaxNodePtr {
                            kind: STRUCT_DEFINITION_NODE,
                            range: 13..33,
                        },
                    },
                    file: FileId(
                        3v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        7v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Struct {
                            name: Identifier {
                                symbol: Symbol(
                                    6,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 40..44,
                                },
                            },
                            type_parameters: [],
                            type_bounds: [],
                            body: Named(
                                [
                                    (
                                        Private,
                                        Identifier {
                                            symbol: Symbol(
                                                7,
                                            ),
                                            span: SyntaxNodePtr {
                                                kind: IDENTIFIER_NODE,
                                                range: 48..49,
                                            },
                                        },
                                        TypeExpression {
                                            mutable: false,
                                            kind: Path {
                                                path: Path {
                                                    segments: [
                                                        PathSegment {
                                                            kind: Identifier(
                                                                Identifier {
                                                                    symbol: Symbol(
                                                                        5,
                                                                    ),
                                                                    span: SyntaxNodePtr {
                                                                        kind: IDENTIFIER_NODE,
                                                                        range: 51..56,
                                                                    },
                                                                },
                                                            ),
                                                            binding: Unresolved,
                                                        },
                                                    ],
                                                    binding: Unresolved,
                                                },
                                            },
                                            span: SyntaxNodePtr {
                                                kind: PATH_TYPE_NODE,
                                                range: 51..56,
                                            },
                                        },
                                    ),
                                ],
                            ),
                        },
                        span: SyntaxNodePtr {
                            kind: STRUCT_DEFINITION_NODE,
                            range: 33..60,
                        },
                    },
                    file: FileId(
                        3v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        8v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Enum {
                            name: Identifier {
                                symbol: Symbol(
                                    3,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 5..9,
                                },
                            },
                            type_parameters: [],
                            type_bounds: [],
                            variants: [],
                        },
                        span: SyntaxNodePtr {
                            kind: ENUM_DEFINITION_NODE,
                            range: 0..13,
                        },
                    },
                    file: FileId(
                        4v1,
                    ),
                },
            },
            Slot {
                version: 1,
                value: Definition {
                    scope: ScopeId(
                        8v1,
                    ),
                    definition: Definition {
                        attributes: [],
                        visibility: Private,
                        kind: Enum {
                            name: Identifier {
                                symbol: Symbol(
                                    4,
                                ),
                                span: SyntaxNodePtr {
                                    kind: IDENTIFIER_NODE,
                                    range: 18..22,
                                },
                            },
                            type_parameters: [],
                            type_bounds: [],
                            variants: [
                                EnumVariant {
                                    attributes: [],
                                    name: Identifier {
                                        symbol: Symbol(
                                            8,
                                        ),
                                        span: SyntaxNodePtr {
                                            kind: IDENTIFIER_NODE,
                                            range: 26..27,
                                        },
                                    },
                                    kind: Unit,
                                    span: SyntaxNodePtr {
                                        kind: ENUM_VARIANT_UNIT_NODE,
                                        range: 26..27,
                                    },
                                },
                                EnumVariant {
                                    attributes: [],
                                    name: Identifier {
                                        symbol: Symbol(
                                            9,
                                        ),
                                        span: SyntaxNodePtr {
                                            kind: IDENTIFIER_NODE,
                                            range: 31..33,
                                        },
                                    },
                                    kind: Scalar(
                                        Expression {
                                            kind: Literal {
                                                value: Literal {
                                                    kind: Integer {
                                                        value: 1,
                                                    },
                                                    span: SyntaxNodePtr {
                                                        kind: INTEGER_LITERAL_NODE,
                                                        range: 35..36,
                                                    },
                                                },
                                            },
                                            span: SyntaxNodePtr {
                                                kind: LITERAL_EXPRESSION_NODE,
                                                range: 35..36,
                                            },
                                        },
                                    ),
                                    span: SyntaxNodePtr {
                                        kind: ENUM_VARIANT_SCALAR_NODE,
                                        range: 31..36,
                                    },
                                },
                                EnumVariant {
                                    attributes: [],
                                    name: Identifier {
                                        symbol: Symbol(
                                            10,
                                        ),
                                        span: SyntaxNodePtr {
                                            kind: IDENTIFIER_NODE,
                                            range: 40..41,
                                        },
                                    },
                                    kind: Unnamed(
                                        [],
                                    ),
                                    span: SyntaxNodePtr {
                                        kind: ENUM_VARIANT_UNNAMED_NODE,
                                        range: 40..46,
                                    },
                                },
                                EnumVariant {
                                    attributes: [],
                                    name: Identifier {
                                        symbol: Symbol(
                                            11,
                                        ),
                                        span: SyntaxNodePtr {
                                            kind: IDENTIFIER_NODE,
                                            range: 50..52,
                                        },
                                    },
                                    kind: Named(
                                        [
                                            (
                                                [],
                                                Identifier {
                                                    symbol: Symbol(
                                                        7,
                                                    ),
                                                    span: SyntaxNodePtr {
                                                        kind: IDENTIFIER_NODE,
                                                        range: 58..59,
                                                    },
                                                },
                                                TypeExpression {
                                                    mutable: false,
                                                    kind: Path {
                                                        path: Path {
                                                            segments: [
                                                                PathSegment {
                                                                    kind: Identifier(
                                                                        Identifier {
                                                                            symbol: Symbol(
                                                                                5,
                                                                            ),
                                                                            span: SyntaxNodePtr {
                                                                                kind: IDENTIFIER_NODE,
                                                                                range: 61..66,
                                                                            },
                                                                        },
                                                                    ),
                                                                    binding: Unresolved,
                                                                },
                                                            ],
                                                            binding: Unresolved,
                                                        },
                                                    },
                                                    span: SyntaxNodePtr {
                                                        kind: PATH_TYPE_NODE,
                                                        range: 61..66,
                                                    },
                                                },
                                            ),
                                        ],
                                    ),
                                    span: SyntaxNodePtr {
                                        kind: ENUM_VARIANT_NAMED_NODE,
                                        range: 50..71,
                                    },
                                },
                            ],
                        },
                        span: SyntaxNodePtr {
                            kind: ENUM_DEFINITION_NODE,
                            range: 13..75,
                        },
                    },
                    file: FileId(
                        4v1,
                    ),
                },
            },
        ],
        free_head: 9,
        num_elems: 8,
        _k: PhantomData<fn(danubec_symbol::DefinitionId) -> danubec_symbol::DefinitionId>,
    },
}
