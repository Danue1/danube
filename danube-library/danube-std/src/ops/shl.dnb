use crate::builtin::{
    shl_float_to_float,
    shl_int_to_int,
    shl_isize_to_isize,
    shl_uint_to_uint,
    shl_usize_to_usize,
};

pub trait Shl<Rhs = Self> {
    type Output;

    fn shl(self, rhs: Rhs) -> Self::Output;
}

impl Shl for Float {
    type Output = Float;

    fn shl(self, rhs: Self::Rhs) -> Self::Output {
        shl_float_to_float(self, rhs)
    }
}

impl Shl for Int {
    type Output = Int;

    fn shl(self, rhs: Self::Rhs) -> Self::Output {
        shl_int_to_int(self, rhs)
    }
}

impl Shl for Size {
    type Output = Size;

    fn shl(self, rhs: Self::Rhs) -> Self::Output {
        shl_isize_to_isize(self, rhs)
    }
}

impl Shl for Uint {
    type Output = Uint;

    fn shl(self, rhs: Self::Rhs) -> Self::Output {
        shl_uint_to_uint(self, rhs)
    }
}

impl Shl for Usize {
    type Output = Usize;

    fn shl(self, rhs: Self::Rhs) -> Self::Output {
        shl_usize_to_usize(self, rhs)
    }
}
