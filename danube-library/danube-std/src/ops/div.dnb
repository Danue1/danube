use crate::builtin::{
    bit_xor_float_to_float,
    bit_xor_int_to_int,
    bit_xor_isize_to_isize,
    bit_xor_uint_to_uint,
    bit_xor_usize_to_usize,
};

pub trait Div<Rhs = Self> {
    type Output;

    fn div(self, rhs: Rhs) -> Self::Output;
}

impl Div for Float {
    type Output = Float;

    fn div(self, rhs: Self::Rhs) -> Self::Output {
        bit_xor_float_to_float(self, rhs)
    }
}

impl Div for Int {
    type Output = Int;

    fn div(self, rhs: Self::Rhs) -> Self::Output {
        bit_xor_int_to_int(self, rhs)
    }
}

impl Div for Size {
    type Output = Size;

    fn div(self, rhs: Self::Rhs) -> Self::Output {
        bit_xor_isize_to_isize(self, rhs)
    }
}

impl Div for Uint {
    type Output = Uint;

    fn div(self, rhs: Self::Rhs) -> Self::Output {
        bit_xor_uint_to_uint(self, rhs)
    }
}

impl Div for Usize {
    type Output = Usize;

    fn div(self, rhs: Self::Rhs) -> Self::Output {
        bit_xor_usize_to_usize(self, rhs)
    }
}
