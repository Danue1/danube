use crate::builtin::{
    bit_or_float_to_float,
    bit_or_int_to_int,
    bit_or_isize_to_isize,
    bit_or_uint_to_uint,
    bit_or_usize_to_usize,
};

pub trait BitOr<Rhs = Self> {
    type Output;

    fn bit_or(self, rhs: Rhs) -> Self::Output;
}

impl BitOr for Float {
    type Output = Float;

    fn bit_or(self, rhs: Self::Rhs) -> Self::Output {
        bit_or_float_to_float(self, rhs)
    }
}

impl BitOr for Int {
    type Output = Int;

    fn bit_or(self, rhs: Self::Rhs) -> Self::Output {
        bit_or_int_to_int(self, rhs)
    }
}

impl BitOr for Size {
    type Output = Size;

    fn bit_or(self, rhs: Self::Rhs) -> Self::Output {
        bit_or_isize_to_isize(self, rhs)
    }
}

impl BitOr for Uint {
    type Output = Uint;

    fn bit_or(self, rhs: Self::Rhs) -> Self::Output {
        bit_or_uint_to_uint(self, rhs)
    }
}

impl BitOr for Usize {
    type Output = Usize;

    fn bit_or(self, rhs: Self::Rhs) -> Self::Output {
        bit_or_usize_to_usize(self, rhs)
    }
}
