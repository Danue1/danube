use crate::builtin::{
    sub_float_to_float,
    sub_int_to_int,
    sub_isize_to_isize,
    sub_uint_to_uint,
    sub_usize_to_usize,
};

pub trait Sub<Rhs = Self> {
    type Output;

    fn sub(self, rhs: Rhs) -> Self::Output;
}

impl Sub for Float {
    type Output = Float;

    fn sub(self, rhs: Self::Rhs) -> Self::Output {
        sub_float_to_float(self, rhs)
    }
}

impl Sub for Int {
    type Output = Int;

    fn sub(self, rhs: Self::Rhs) -> Self::Output {
        sub_int_to_int(self, rhs)
    }
}

impl Sub for Size {
    type Output = Size;

    fn sub(self, rhs: Self::Rhs) -> Self::Output {
        sub_isize_to_isize(self, rhs)
    }
}

impl Sub for Uint {
    type Output = Uint;

    fn sub(self, rhs: Self::Rhs) -> Self::Output {
        sub_uint_to_uint(self, rhs)
    }
}

impl Sub for Usize {
    type Output = Usize;

    fn sub(self, rhs: Self::Rhs) -> Self::Output {
        sub_usize_to_usize(self, rhs)
    }
}
