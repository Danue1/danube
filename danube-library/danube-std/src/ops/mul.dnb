use crate::builtin::{
    mul_float_to_float,
    mul_int_to_int,
    mul_isize_to_isize,
    mul_uint_to_uint,
    mul_usize_to_usize,
};

pub trait Mul<Rhs = Self> {
    type Output;

    fn mul(self, rhs: Rhs) -> Self::Output;
}

impl Mul for Float {
    type Output = Float;

    fn mul(self, rhs: Self::Rhs) -> Self::Output {
        mul_float_to_float(self, rhs)
    }
}

impl Mul for Int {
    type Output = Int;

    fn mul(self, rhs: Self::Rhs) -> Self::Output {
        mul_int_to_int(self, rhs)
    }
}

impl Mul for Size {
    type Output = Size;

    fn mul(self, rhs: Self::Rhs) -> Self::Output {
        mul_isize_to_isize(self, rhs)
    }
}

impl Mul for Uint {
    type Output = Uint;

    fn mul(self, rhs: Self::Rhs) -> Self::Output {
        mul_uint_to_uint(self, rhs)
    }
}

impl Mul for Usize {
    type Output = Usize;

    fn mul(self, rhs: Self::Rhs) -> Self::Output {
        mul_usize_to_usize(self, rhs)
    }
}
