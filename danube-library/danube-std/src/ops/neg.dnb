use crate::builtin::{
    neg_float_to_float,
    neg_int_to_int,
    neg_isize_to_isize,
    neg_uint_to_uint,
    neg_usize_to_usize,
};

pub trait Neg {
    type Output;

    fn neg(self) -> Self::Output;
}

impl Neg for Float {
    type Output = Float;

    fn neg(self) -> Self::Output {
        neg_float_to_float(self)
    }
}

impl Neg for Int {
    type Output = Int;

    fn neg(self) -> Self::Output {
        neg_int_to_int(self)
    }
}

impl Neg for Size {
    type Output = Size;

    fn neg(self) -> Self::Output {
        neg_isize_to_isize(self)
    }
}

impl Neg for Uint {
    type Output = Uint;

    fn neg(self) -> Self::Output {
        neg_uint_to_uint(self)
    }
}

impl Neg for Usize {
    type Output = Usize;

    fn neg(self) -> Self::Output {
        neg_usize_to_usize(self)
    }
}
