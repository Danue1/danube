use crate::builtin::{
    rem_float_to_float,
    rem_int_to_int,
    rem_isize_to_isize,
    rem_uint_to_uint,
    rem_usize_to_usize,
};

pub trait Rem<Rhs = Self> {
    type Output;

    fn rem(self, rhs: Rhs) -> Self::Output;
}

impl Rem for Float {
    type Output = Float;

    fn rem(self, rhs: Self::Rhs) -> Self::Output {
        rem_float_to_float(self, rhs)
    }
}

impl Rem for Int {
    type Output = Int;

    fn rem(self, rhs: Self::Rhs) -> Self::Output {
        rem_int_to_int(self, rhs)
    }
}

impl Rem for Size {
    type Output = Size;

    fn rem(self, rhs: Self::Rhs) -> Self::Output {
        rem_isize_to_isize(self, rhs)
    }
}

impl Rem for Uint {
    type Output = Uint;

    fn rem(self, rhs: Self::Rhs) -> Self::Output {
        rem_uint_to_uint(self, rhs)
    }
}

impl Rem for Usize {
    type Output = Usize;

    fn rem(self, rhs: Self::Rhs) -> Self::Output {
        rem_usize_to_usize(self, rhs)
    }
}
