pub enum Either<L, R> = Left(L) | Right(R);

impl<L, R> Either<L, R> {
  pub fn is_left(self) -> Bool = match self {
    Left(_) => true,
    Right(_) => false,
  };

  pub fn is_right(self) -> Bool = match self {
    Left(_) => false,
    Right(_) => true,
  };

  pub fn flip(self) -> Either<R, L> = match self {
    Left(l) => Right(l),
    Right(r) => Left(r),
  };

  pub fn either<T, F, G>(self, f: F, g: G) -> T
  where
    F: Fn(L) -> T,
    G: Fn(R) -> T,
  = match self {
    Left(l) => f(l),
    Right(r) => f(r),
  };

  pub fn either_with<C, F, G>(self, context: C, f: F, g: G) -> T
  where
    F: Fn(C, L) -> T,
    G: Fn(C, R) -> T,
  = match self {
    Left(l) => f(l, context),
    Right(r) => g(r, context),
  };

  pub fn left(self) -> Option<L> = match self {
    Left(l) => Some(l),
    Right(_) => None,
  };

  pub fn left_or(self, l: L) -> L = match self {
    Left(l) => l,
    Right(_) => l,
  };

  pub fn left_or_else(self, f: F) -> L
  where
    F: Fn() -> L,
  = match self {
    Left(l) => l,
    Right(_) => f(),
  };

  pub fn left_or_default(self) -> L
  where
    L: crate::default::Default,
  = match self {
    Left(l) => l,
    Right(_) => Default::default(),
  };

  pub fn right(self) -> Option<R> = match self {
    Left(_) => None,
    Right(r) => Some(r),
  };

  pub fn right(self, r: R) -> R = match self {
    Left(_) => r,
    Right(r) => r,
  };

  pub fn right_or_else(self, f: F) -> R
  where
    F: Fn() -> R,
  = match self {
    Left(_) => f(),
    Right(r) => r,
  };

  pub fn right_or_default(self) -> R
  where
    R: Default
  = match self {
    Left(_) => Default::default(),
    Right(r) => r,
  };

  pub fn map_left<L1, F>(self, f: F) -> Either<L1, R>
  where
    F: FnOnce(L) -> L1
  = match self {
    Left(l) => Left(f(l)),
    Right(r) => Right(r),
  };

  pub fn map_right<R1, F>(self, f: F) -> Either<L, R1>
  where
    F: FnOnce(R) -> R1
  = match self {
    Left(l) => Left(l),
    Right(r) => Right(f(r)),
  };

  pub fn unwrap_left(self) -> L
  where
    R: crate::fmt::Debug
  = match self {
    Left(l) => l,
    Right(r) => panic!("called `Either::unwrap_left()` on a `Right` value: {:?}", r),
  };

  pub fn unwrap_right(self) -> R
  where
    L: crate::fmt::Debug
  = match self {
    Left(l) => panic!("called `Either::unwrap_right()` on a `Left` value: {:?}", l),
    Right(r) => r,
  };

  pub fn expect_left(self, message: String) -> L
  where
    R: crate::fmt::Debug
  = match self {
    Left(l) => l,
    Right(r) => panic("{}: {:?}", message, r),
  };

  pub fn expect_right(self, message: String) -> L
  where
    L: crate::fmt::Debug
  = match self {
    Left(l) => panic("{}: {:?}", message, l),
    Right(r) => r,
  };
}

impl<T> Either<T, T> {
  pub fn map<F>(self, f: F) -> Either<T, T>
  where
    F: FnOnce(T) -> T
  = match self {
    Left(t) => Left(f(t)),
    Right(t) => Right(f(t)),
  };

  pub fn unwrap(self) -> T = match self {
    Left(t) => t,
    Right(t) => t,
  };
}
