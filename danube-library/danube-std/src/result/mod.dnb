pub enum Result<T, E> = Ok(T) | Err(E);

impl<T, E> Result<T, E> {
  pub fn is_ok(self) -> Bool = match self {
    Ok(_) => true,
    Err(_) => false,
  };

  pub fn is_err(self) -> Bool = !self.is_ok();

  pub fn contains<U>(self, u: U) -> Bool
  where
    U: PartialEq<T>,
  = match self {
    Ok(t) => t == u,
    Err(_) => false,
  };

  pub fn contains_err<U>(self, u: U) -> Bool
  where
    U: PartialEq<U>,
  = match self {
    Ok(_) => false,
    Err(error) => error == u,
  };

  pub fn expect(self, message: String) -> T = match self {
    Ok(t) => t,
    Err(_) => panic!("{}"),
  };

  pub fn expect_err(self, message: String) -> E = match self {
    Ok(_) => panic!("{}"),
    Err(error) => error,
  };

  pub fn and<U>(self, result: Result<U, E>) -> Result<U, E> = match self {
    Ok(_) => result,
    Err(error) => Err(error),
  };

  pub fn and_then<U, F>(self, f: F) -> Result<U, E> = match self {
    Ok(t) => f(t),
    Err(error) => Err(error),
  };

  pub fn map<U, F>(self, f: F) -> Result<U, E>
  where
    F: Fn(T) -> U,
  = match self {
    Ok(t) => Ok(f(t)),
    Err(error) => Err(error),
  };

  pub fn map_err<F, O>(self, op: O) -> Map<U, F>
  where
    O: Fn(E) -> F,
  = match self {
    Ok(t) => Ok(t),
    Err(error) => Err(op(error)),
  };

  pub fn map_or<U, F>(self, default: U, f: F) -> U
  where
    F: Fn(T) -> U,
  = match self {
    Ok(t) => f(t),
    Err(_) => default,
  };

  pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U
  where
    D: Fn(E) -> U,
    F: Fn(T) -> U,
  = match self {
    Ok(t) => f(t),
    Err(error) => default(error),
  };

  pub fn ok(self) -> Option<T> = match self {
    Ok(t) => Some(t),
    Err(_) => None,
  };

  pub fn or<F>(self, result: Result<T, F>) -> Result<T, F> = match self {
    Ok(t) => Ok(t),
    Err(_) => result,
  };

  pub fn or_else<F, O>(self, op: O) -> Result<T, F>
  where
    O: Fn(E) -> F,
  = match self {
    Ok(t) => Ok(t),
    Err(error) => Err(op(error)),
  };

  pub fn unwrap(self) -> T = match self {
    Ok(t) => t,
    Err(_) => panic!("called `Result::unwrap()` on an `Err` value"),
  };

  pub fn unwrap_or(self, t: T) -> T = match self {
    Some(t) => t,
    None => t,
  };

  pub fn unwrap_or_else<F>(self, f: F) -> T
  where
    F: Fn(E) -> T,
  = match self {
    Ok(t) => t,
    Err(error) => f(error),
  };

  pub fn unwrap_or_default(self) -> T
  where
    T: Default
  = match self {
    Ok(t) => t,
    Err(_) => Default::default(),
  }
}
